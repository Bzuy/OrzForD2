let container = document.getElementById("steps");
let resultText = document.getElementById("result");

function startRecursion() {
    let number = parseInt(document.getElementById("inputNumber").value);

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (isNaN(number) || number < 0) {
        alert("Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n d∆∞∆°ng.");
        return;
    }

    // Reset
    container.innerHTML = "";
    resultText.textContent = "";

    // B·∫Øt ƒë·∫ßu g·ªçi h√†m
    setTimeout(() => {
        let result = factorialVisual(number);
        setTimeout(() => {
            resultText.textContent = `‚ú® Giai th·ª´a c·ªßa ${number} l√†: ${result}`;
        }, (number + 2) * 1000); 
    }, 300);
}

// M√¥ ph·ªèng ƒë·ªá quy v·ªõi kh·ªëi h·ªôp
let delay = 0;

function factorialVisual(n) {
    const currentBox = createBox(`üì• G·ªçi factorial(${n})`, "call");
    container.appendChild(currentBox);

    // ƒêi·ªÅu ki·ªán d·ª´ng
    if (n === 0 || n === 1) {
        delay += 1000;
        setTimeout(() => {
            currentBox.textContent = `‚úÖ factorial(${n}) = 1`;
            currentBox.classList.replace("call", "return");
        }, delay);
        return 1;
    }

    // ƒê·ªá quy
    let result = n * factorialVisual(n - 1);

    // Khi tr·∫£ v·ªÅ
    delay += 500;
    setTimeout(() => {
        currentBox.textContent = `üîÅ factorial(${n}) = ${n} * factorial(${n - 1}) = ${result}`;
        currentBox.classList.replace("call", "return");
    }, delay);

    return result;
}

// T·∫°o kh·ªëi
function createBox(text, type) {
    const div = document.createElement("div");
    div.className = `rec-box ${type}`;
    div.textContent = text;
    return div;
}
